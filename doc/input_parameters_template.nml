&input_parameters
              title = 'Cavity at Reynolds number 100.'  ! Descriptive name of the case which will be written in monitor file.                                      
        mesh_format = 'nativeMesh'  ! Mesh format 'nativeMesh' for native polyMesh format or 'foamMesh' for OpenFOAM polyMesh.
              lread = F           ! Read restart file - continue simulation from saved state?  True/False.
              ltest = F           ! Verbosity for linear solver convergence (for troubleshooting) True/False. 
        !
        ! Approximation details for velocity field.
        !
              calcU = T             ! Activate Velocity field calculation? True/False.
               urfU = 0.7, 0.7, 0.7 ! Under-relaxation factor for momentum eq
               gdsU = 1.0           ! gamma-deferred correction parameter for velocity
           cSchemeU = 'linearUpwind'! Convection scheme for momentun eq
           dSchemeU = 'skewness'    ! Diffusion scheme for momentum eq
            nrelaxU = 1             ! Integer parameter for Diffusion scheme - advanced
           lSolverU = 'bicgstab'    ! Linear algebraic solver for momentum eq
           maxiterU = 5             ! Max no of iterations for linear U-V-W equations
            tolAbsU = 1e-13         ! Absolute tolerance level for residual for linear U-V-W equations
            tolRelU = 0.025         ! Relative tolerance level for residual for linear U-V-W equations
            pscheme = 'linear'      ! Pressure interpolation scheme.
        !
        ! Approximation details for pressure/pressure correction.
        !
              calcP = T             ! Activate Pressure field calculation? True/False.
               urfP = 0.3           ! Under-relaxation factor for pressure
           lSolverP = 'iccg'        ! Linear algebraic solver for pressure/pressure correction
           maxiterP = 50            ! Max no of iterations for pressure/pressure correction
            tolAbsP = 1e-7          ! Absolute tolerance level for residual for pressure/pressure correction
            tolRelP = 0.025         ! Relative tolerance level for residual for pressure/pressure correction  
        !
        ! Physical model: Viscous flows - Laminar/Turbulent, Activation and model details.
        !
            TurbModel%NAME = 'k_epsilon_std'
            TurbModel%Scalar(1)%NAME = "                    "
            TurbModel%Scalar(1)%URF = 0.7     
            TurbModel%Scalar(1)%GDS =  1.0     
            TurbModel%Scalar(1)%CSCHEME = 'boundedLinearUpwind'
            TurbModel%Scalar(1)%DSCHEME = 'skewness'
            TurbModel%Scalar(1)%NRELAX = 0          
            TurbModel%Scalar(1)%LSOLVER = 'bicgstab'
            TurbModel%Scalar(1)%MAXITER = 10         
            TurbModel%Scalar(1)%TOLABS =  1.0E-010
            TurbModel%Scalar(1)%TOLREL =  1.0E-002
            TurbModel%Scalar(1)%RESOR =  0.0
            TurbModel%Scalar(2)%NAME = "                    "
            TurbModel%Scalar(2)%URF = 0.7
            TurbModel%Scalar(2)%GDS =  1.0   
            TurbModel%Scalar(2)%CSCHEME = 'boundedLinearUpwind'
            TurbModel%Scalar(2)%DSCHEME = 'skewness'
            TurbModel%Scalar(2)%NRELAX = 0          
            TurbModel%Scalar(2)%LSOLVER = 'bicgstab'
            TurbModel%Scalar(2)%MAXITER = 10         
            TurbModel%Scalar(2)%TOLABS =  1.0e-010
            TurbModel%Scalar(2)%TOLREL =  1.0E-002
            TurbModel%Scalar(2)%RESOR =  0.0    
            TurbModel%URFVIS =  1.0
        !
        ! Physical model: Rheology - Non-Newtonian fluids - model and solution details
        ! 
            calcVis = F           ! Activate dynamic viscosity recalculation (Temperature dependance, Non-Newtonian flows)
non_newtonian_model = 'PowerLaw'  ! Self-explanatory
               npow = 0.4         ! Exponent for power-law fluids
             Consst = 10.0        ! Consistency index for power-law fluids
           shearmin = 0.001       ! Lower limit for the shear rate magnitude for power-law fluids
              Tau_0 = 1.0         ! Yield stress
               megp = 1.0         ! Exponential growth parameter
          muplastic = 1.0         ! Plastic viscosity
             muzero = 1.0         ! Zero shear rate viscosity
            muinfty = 1.0         ! Infinity shear rate viscosity
            lamtime = 1.0         ! Natural time - time parameter
                acy = 2.0         ! Exponent a in Carreau-Yasuda model
             urfVis = 0.4         ! Under-relaxation parameter
        !
        ! Physical model: Heat transfer, Temperature as energy equation, Activation and model details.
        !
              calcT = F              ! Activate Temperature equation calculation? True/False.
               urfT = 0.7            ! Under-relaxation factors.
               gdsT = 1.0            ! Deferred correction factor.
           cSchemeT = 'linearUpwind' ! Convection scheme - default is second order upwind.
           dSchemeT = 'skewness'     ! Diffusion scheme, i.e. the method for normal gradient at face skewness/offset.
             nrelaxT = 0             ! Relaxation parameter non-orthogonal correction for face gradient.
            lSolverT = 'bicgstab'    ! Linear algebraic solver.
            maxiterT = 20            ! Max number of iterations in linear solver.
             tolAbsT = 1e-15         ! Absolute residual level.
             tolRelT = 0.01          ! Relative drop in residual to exit linear solver.
                sigt = 0.9           ! sigma_t - Prandtl-Schmid number for temperature 
        !
        ! Physical model: Energy equation, Activation and model details.
        !
             calcEn  = F              ! Activate Energy field calculation? True/False.
               urfEn = 0.9            ! Under-relaxation factors.
               gdsEn = 1.0            ! Deferred correction factor.
           cSchemeEn = 'linearUpwind' ! Convection scheme - default is second order upwind.
           dSchemeEn = 'skewness'     ! Diffusion scheme, i.e. the method for normal gradient at face skewness/offset.
            nrelaxEn = 0              ! Relaxation parameter non-orthogonal correction for face gradient.
           lSolverEn = 'bicgstab'     ! Linear algebraic solver.
           maxiterEn = 20             ! Max number of iterations in linear solver.
            tolAbsEn = 1e-15          ! Absolute residual level.
            tolRelEn = 0.01           ! Relative drop in residual to exit linear solver.
              sigtEn = 0.9            ! sigma_en - Prandtl-Schmid number for energy
    solveTotalEnergy = .True.         !@ What we solve here - default is total energy, change it 
 solveInternalEnergy = .False.        !@ in input.nml file.
       solveEnthalpy = .False.        !@
         addViscDiss = .False.        ! Add viscous dissipation term? T/F
        !
        ! Physical model: Buoyancy 
        !
               lbuoy = F             !g Buoyancy activated True/False
          boussinesq = T             !g Bousinesq approximation for buoyancy
                tref = 300.0         !  Reference temperature for buoyant flows
               gravx = 0.0           !g Three components of gravity vector
               gravy = -9.81         !g -
               gravz = 0.0           !g -
        !
        ! Physical model: Dispersion of a passive scalar: Activation and solution details
        !
             calcCon = F              ! Activate passive scalar concentration field calculation? True/False.
              urfCon = 0.7            ! Under-relaxation factors.
              gdsCon = 1.0            ! Deferred correction factor.
          cSchemeCon = 'linearUpwind' ! Convection scheme - default is second order upwind.
          dSchemeCon = 'skewness'     ! Diffusion scheme, i.e. the method for normal gradient at face skewness/offset.
           nrelaxCon = 0              ! Type of non-orthogonal correction for face gradient minimal/orthogonal/over-relaxed. 1/0/-1.
          lSolverCon = 'bicgstab'     ! Linear algebraic solver.
          maxiterCon = 20             ! Max number of iterations in linear solver.
           tolAbsCon = 1e-15          ! Absolute residual level.
           tolRelCon = 0.01           ! Relative drop in residual to exit linear solver.
              sigCon = 0.9            ! Prandtl-Schmidt number for passive scalar concentration
        !
        ! Physical model: Magnetohydrodynamics using Electric potential: Activation and solution details
        !
            calcEpot = F             ! Activate Electric potential field calculation? True/False.
             urfEpot = 0.8           ! Under-relaxation factor.
             gdsEpot = 1.0           ! Deferred correction factor.
         lSolverEpot = 'iccg'        ! Linear algebraic solver.
         maxiterEpot = 20            ! Max number of iterations in linear solver.
          tolAbsEpot = 1e-15         ! Absolute residual level.
          tolRelEpot = 0.01          ! Relative drop in residual to exit linear solver.
        !
        ! Definition of physical properties of fluid.
        !
             densit = 1.0            ! Fluid density [kg/m3]
             viscos = 1e-2           ! Molecular dynamic viscosity [Pa.s]       
              pranl = 1.0            ! Prandtl coefficient for specific fluid
               beta = 1e-3           ! Thermal expansion coefficient
        !
        ! Turbulent Heat flux model and underrelaxation for turb heat fluxes and RST.
        !    
              lsgdh = f              !h Simple gradient hypothesis for heat-fluxes, or...
              lggdh = f              !h Generalized gradient hypothesis for heat fluxes, or...
               lafm = f              !h Algebraic flux modelling for heat fluxes.
             facnap = 1.0            ! Underrelaxation factor for Reynolds stresses
             facflx = 1.0            !h Underrelaxation factor for heat fluxes
        !
        ! Unsteady simulation
        !    
         ltransient = T           !% |Unsteady simulation True/False and chose ONE algorithm  below
                bdf = T           !% |Backward-Euler; First-Order Implicit, or...
               bdf2 = f           !% |Second-Order Backward Euler; Second-Order Implicit, or...
               bdf3 = f           !% |Third-order backard, or...
                 CN = f           !% |Crank-Nicolson.
           autotime = T           !# Automatic timestep for pseudotransient runs,
    lenscale_option = 'conservative'    !# length scale option for pseudotransient runs, 'conservative' or 'aggresive'.
        !
        ! Numerical approximation: Gradient approximation and limiting
        !
              lstsq = F           !@ |Gradient approximation, chose ONE: Unweighted Least-Square gradient approximation, or...
           lstsq_qr = F           !@ |Least square gradients based on thin QR decomposition, or...
           lstsq_dm = F           !@ |Distance-square weighted version of Least-Square Gradient, or...
         node_gauss = F           !@ |Node based Gauss gradient using pseudolaplacian interpolation, or...
              gauss = T           !@ |Cell based Gauss gradient with simple linear interpolation.
            limiter = 'Venkatakishnan' ! Gradient limiter - default for all gradients (no-limit, Barth-Jespersen, Venkatakishnan, multidimensional, R3,...)
        !
        ! Solution method: pressure-velocity coupling
        !    
             SIMPLE = T       !# |Pressure-velocity coupling method - SIMPLE, or...
               PISO = F       !# |Pressure-velocity coupling method - PISO.
       compressible = F       !# SIMPLE for compressible flows. Activate Energy eqn.
              ncorr = 1       ! Number of PISO corrections - only relevant for PISO.
              npcor = 1       ! Number of iterations for pressure/pressure correction equation - Number of Nonorthogonal corrections.  
           pRefCell = 1       ! Reference cell for setting pressure level (since we have pure Neumann problem)
          tolerance = 1e-5    ! Desired level of convergence for SIMPLE iterations.
        !
        ! Simulation run details
        !
            numstep = 1000     ! Total number of timesteps.                   
           timestep = 1        ! Timestep size  - also known as dt.
             nzapis = 500      ! Program writes output files every NZAPIS timesteps.
              maxit = 1        ! Number of iterations in SIMPLE/PISO sequential equation solution loop. 
           CoNumFix = f        !Co  |Adaptive timestep size based on target Courant number, True/False.
      CoNumFixValue = 1.0      !Co  |If CoNumFix=True then set target maximum Courant number here.
        !
        ! Constant-mass flux: Activation and prescription of target bulk velocity.
        !
        const_mflux = f        !mdot | Do we have constant mass flow in the domain True/False.
            magUbar = 0.0      !mdot | Target bulk velocity for constant mass flow situation.
        !
        ! Reference values
        !        
            rhoref = 1.0_dp  ! Reference density
            Uref = 1.0_dp    ! Reference velocity
            Aref = 1.0_dp    ! Reference area 
            pref = 0.0_dp    ! Reference pressure 
            lref = 1.0_dp    ! Reference length
/

!
! For every field we need:
! Boolean do we solve that field, convection scheme/limiter, higher-order term under-relaxation parameter (gds), 
! linear system solution method, relative tolerance level for convergence (sor), maximum number of timestep (nsw),
! and under-relaxation factor for outer (e.g. SIMPLE) iterations.
!
! Reminder for developers.
! The process of introducing parameters into simulation consists of following steps
! 1) In a module you are developing, declare a variable and set a default value during declaration. This variable should be public.
!   real(dp) :: myvar = 1.05
! 2) Introduce it into the input_parameters namelist in src/io/read_input.f90
!  namelist / input_parameters /   &
!                      ..., &
!                    myvar, &
!                       ...
! 3) Read input file with namelist: call read_nml_input_parameters(eg. 'input.nml' or any other name)
!
! IMPORTANT: Namelist .nml file doesn't have to contain all the entries, and it doens't need to be in the same order.
!
!
